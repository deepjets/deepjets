#!/usr/bin/env python


def plot(signal, background, nbins, filename):
    import numpy as np
    from matplotlib import pyplot as plt
    import h5py
    
    signal_h5file_events = h5py.File(signal, 'r')
    signal_aux = signal_h5file_events['auxvars']
    
    background_h5file_events = h5py.File(background, 'r')
    background_aux = background_h5file_events['auxvars']

    signal_selection = (signal_aux['mass_trimmed'] > 65) & (signal_aux['mass_trimmed'] < 95)
    background_selection = (background_aux['mass_trimmed'] > 65) & (background_aux['mass_trimmed'] < 95)
    
    if 'weights' in signal_aux.dtype.names:
        signal_weights = signal_weights
    else:
        signal_weights = np.ones(len(signal_aux))

    if 'weights' in background_aux.dtype.names:
        background_weights = background_weights
    else:
        background_weights = np.ones(len(background_aux))

    fig, ax = plt.subplots(2, 2, figsize=(10, 10))
    
    vals1, _, _ = ax[0, 0].hist(signal_aux['pt_trimmed'], bins=np.linspace(250, 300, nbins),
               histtype='stepfilled', facecolor='none', edgecolor='blue', normed=1,
               label=r'$W\rightarrow qq\prime$', weights=signal_weights)
    vals2, _, _ = ax[0, 0].hist(background_aux['pt_trimmed'], bins=np.linspace(250, 300, nbins),
               histtype='stepfilled', facecolor='none', edgecolor='red', normed=1,
               label='QCD jets', weights=background_weights)
    ax[0, 0].set_ylim((0, 1.3 * max(np.max(vals1), np.max(vals2)))) 
    ax[0, 0].set_ylabel('Normalized to Unity')
    ax[0, 0].set_xlabel(r'Trimmed Jet $p_{T}$ [GeV]', fontsize=12)
    ax[0, 0].legend(frameon=False)
    ax[0, 0].set_title(r'Pythia 8 $\sqrt{s}=13$ TeV')

    vals1, _, _ = ax[0, 1].hist(signal_aux['mass_trimmed'], bins=np.linspace(65, 95, nbins),
               histtype='stepfilled', facecolor='none', edgecolor='blue', normed=1,
               label=r'$W\rightarrow qq\prime$', weights=signal_weights)
    vals2, _, _ = ax[0, 1].hist(background_aux['mass_trimmed'], bins=np.linspace(65, 95, nbins),
               histtype='stepfilled', facecolor='none', edgecolor='red', normed=1,
               label='QCD jets', weights=background_weights)
    ax[0, 1].set_ylim((0, 1.3 * max(np.max(vals1), np.max(vals2)))) 
    ax[0, 1].set_ylabel('Normalized to Unity')
    ax[0, 1].set_xlabel(r'Trimmed Jet Mass [GeV]', fontsize=12)
    ax[0, 1].legend(frameon=False)
    ax[0, 1].set_title(r'Pythia 8 $\sqrt{s}=13$ TeV')
    
    vals1, _, _ = ax[1, 0].hist(np.true_divide(signal_aux['tau_2'], signal_aux['tau_1'])[signal_selection], bins=np.linspace(0, 1, nbins),
               histtype='stepfilled', facecolor='none', edgecolor='blue', normed=1,
               label=r'$W\rightarrow qq\prime$', weights=signal_weights[signal_selection])
    vals2, _, _ = ax[1, 0].hist(np.true_divide(background_aux['tau_2'], background_aux['tau_1'])[background_selection], bins=np.linspace(0, 1, nbins),
               histtype='stepfilled', facecolor='none', edgecolor='red', normed=1,
               label='QCD jets', weights=background_weights[background_selection])
    ax[1, 0].set_ylim((0, 1.3 * max(np.max(vals1), np.max(vals2))))
    ax[1, 0].set_ylabel('Normalized to Unity')
    ax[1, 0].set_xlabel(r'Jet $\tau_{21}$', fontsize=12)
    ax[1, 0].legend(frameon=False)
    ax[1, 0].set_title(r'Pythia 8 $\sqrt{s}=13$ TeV')

    vals1, _, _ = ax[1, 1].hist(signal_aux['subjet_dr'][signal_selection], bins=np.linspace(0, 1, nbins),
               histtype='stepfilled', facecolor='none', edgecolor='blue', normed=1,
               label=r'$W\rightarrow qq\prime$', weights=signal_weights[signal_selection])
    vals2, _, _ = ax[1, 1].hist(background_aux['subjet_dr'][background_selection], bins=np.linspace(0, 1, nbins),
               histtype='stepfilled', facecolor='none', edgecolor='red', normed=1,
               label='QCD jets', weights=background_weights[background_selection])
    ax[1, 1].set_ylim((0, 1.3 * max(np.max(vals1), np.max(vals2))))
    ax[1, 1].set_ylabel('Normalized to Unity')
    ax[1, 1].set_xlabel(r'$\Delta R$ between subjets', fontsize=12)
    ax[1, 1].legend(frameon=False)
    ax[1, 1].set_title(r'Pythia 8 $\sqrt{s}=13$ TeV')

    fig.tight_layout()
    plt.savefig(filename)
    


if __name__ == '__main__':
    from argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument('--bins', default=100, type=int)
    parser.add_argument('--output', '-o', default='plots.png')
    parser.add_argument('signal')
    parser.add_argument('background')
    args = parser.parse_args()

    plot(args.signal, args.background, nbins=args.bins, filename=args.output)
