#!/usr/bin/env python

from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('--gpu', action='store_true', default=False)
parser.add_argument('--batch', default=None)
parser.add_argument('--dry', action='store_true', default=False)
parser.add_argument('network')
parser.add_argument('files', nargs='+')
args = parser.parse_args()

import os
import sys

if args.batch is not None:
    # call me again but in a batch job for each input file
    import subprocess
    from deepjets.path_utils import mkdir_p

    cmd = sys.argv[:]
    # remove batch option
    idx = cmd.index('--batch')
    cmd.pop(idx)
    cmd.pop(idx)
    # remove filenames
    for filename in args.files:
        cmd.remove(filename)
    output_dir = os.getcwd()
    setup_cmd = "source {0}/setup.sh; cd {1};".format(
        os.path.dirname(os.path.realpath(__file__)),
        output_dir)
    log_path = os.path.join(output_dir, 'log')
    if args.dry:
        print "mkdir -p {0}".format(log_path)
    else:
        mkdir_p(log_path)
    # call self in batch job once per file
    for filename in args.files:
        name = '_'.join([os.path.splitext(os.path.basename(filename))[0], filename])
        cmd_file = ' '.join(cmd + [filename])
        cmd_batch = (
            'echo "{setup} {cmd_file}" | '
            'qsub -e {output_dir}/log -o {output_dir}/log '
            '-N {name} -l nodes=1:ppn=1 -q {queue};').format(
                setup=setup_cmd,
                cmd_file=cmd_file,
                output_dir=output_dir,
                queue=args.batch,
                name=name)
        print cmd_batch
        if not args.dry:
            subprocess.call(cmd_batch, shell=True)
    sys.exit(0)

if args.gpu:
    from deepjets.gpu_lock import obtain_lock_id
    gpu_id = obtain_lock_id(block=True)

    import theano.sandbox.cuda
    theano.sandbox.cuda.use('gpu{0}'.format(gpu_id))

import numpy as np
import h5py as h5
from deepjets import models

model = models.load_model(args.network)

def classify(imagesfile, output):
    weights = None
    testfile = False

    with h5.File(imagesfile, 'r') as h5file:
        if 'Y_test' in h5file:
            testfile = True
            y_test = h5file['Y_test'][:]
            y_proba = model.predict_proba(h5file['X_test'], batch_size=1000)
            if 'weights' in h5file['auxvars_test'].dtype.names:
                weights = h5file['auxvars_test']['weights']
        else:
            images = h5file['images'].value
            images = images.reshape(-1, images.shape[1] * images.shape[2])
            y_proba = model.predict_proba(images, batch_size=1000)

    # normalize
    y_proba /= y_proba.sum(axis=1)[:, np.newaxis]
    y_proba = y_proba[:, 0]

    with h5.File(output, 'w') as h5file:
        if testfile:
            h5file.create_dataset('Y_test', data=y_test)
        h5file.create_dataset('Y_proba', data=y_proba)
        if weights is not None:
            h5file.create_dataset('weights', data=weights)

for imagesfile in args.files:
    output = os.path.splitext(imagesfile)[0] + '_proba.h5'
    if os.path.exists(output):
        print "{0} already exists".format(output)
        continue
    classify(imagesfile, output)
