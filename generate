#!/usr/bin/env python
"""
Generate PYTHIA events and save an HDF5 file containing final state particles.
"""
import os
import sys
from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('--output', '-o', default=None)
parser.add_argument('--events', type=int, default=1000)
parser.add_argument('--random-state', type=int, default=0)
parser.add_argument('--cut-on-pdgid', type=int, default=0)
parser.add_argument('--pdgid-pt-min', type=float, default=-1)
parser.add_argument('--pdgid-pt-max', type=float, default=-1)
parser.add_argument('--params', default=None)
parser.add_argument('--batch', default=None)
parser.add_argument('--dry', action='store_true', default=False)
parser.add_argument('-d', '--debug', action='store_true', default=False,       
                    help="show stack trace in the event of "                
                         "an uncaught exception")
parser.add_argument('config')
args = parser.parse_args()

import logging

logging.basicConfig()
log = logging.getLogger(os.path.basename(__file__))
log.setLevel(logging.INFO)

if args.output is None:
    args.output = os.path.splitext(args.config)[0] + '.h5'

if args.params is not None:
    args.params = dict([token.split('=') for token in args.params.split(';')])

def get_suffix(args):
    import re
    suffix = os.path.splitext(args.config)[0]
    suffix += '_r{0}_e{0}'.format(args.random_state, args.events)
    if args.params is not None:
        suffix += '_{0}'.format(re.sub('[^A-Za-z0-9]+', '_', args.params))
    return suffix

if args.batch is not None:
    # call me again but in a batch job for each input file
    import subprocess
    from deepjets.path_utils import mkdir_p

    cmd = sys.argv[:]
    # remove batch option
    idx = cmd.index('--batch')
    cmd.pop(idx)
    cmd.pop(idx)
    output_dir = os.path.dirname(args.output)
    setup_cmd = "source {0}/setup.sh; cd {1};".format(
        os.path.dirname(os.path.realpath(__file__)),
        os.getcwd())
    log_path = os.path.join(output_dir, 'log')
    if args.dry:
        print "mkdir -p {0}".format(log_path)
    else:
        mkdir_p(log_path)
    # call self in batch job
    name = '_'.join([os.path.basename(__file__), get_suffix(args)])
    cmd = ' '.join(cmd)
    cmd_batch = (
        'echo "{setup} {cmd}" | '
        'qsub -e {log_dir} -o {log_dir} '
        '-N {name} -l nodes=1:ppn=1 -q {queue};').format(
            setup=setup_cmd,
            cmd=cmd,
            output_dir=output_dir,
            log_dir=os.path.join(output_dir, 'log'),
            queue=args.batch,
            name=name)
    print cmd_batch
    if not args.dry:
        subprocess.call(cmd_batch, shell=True)
    sys.exit(0)

from deepjets.generate import generate_events, get_generator_input
from deepjets.samples import create_event_datasets
import numpy as np
import h5py

output_exists = os.path.exists(args.output)
h5file = h5py.File(args.output, 'w')
    
try:
    gen_input = get_generator_input('pythia',
        args.config, random_state=args.random_state,
        cut_on_pdgid=args.cut_on_pdgid,
        pdgid_pt_min=args.pdgid_pt_min,
        pdgid_pt_max=args.pdgid_pt_max,
        params_dict=args.params)

    create_event_datasets(h5file, args.events)
    dset_particles = h5file['events']

    ievent = 0
    for event in generate_events(gen_input, args.events):
        dset_particles[ievent] = event
        ievent += 1
except KeyboardInterrupt:
    log.info("Caught Ctrl-c ... cleaning up")
    h5file.close()
    if not output_exists:
        log.info("Removing {0}".format(args.output))
        os.unlink(args.output)
    sys.exit(1)
except Exception as e:
    if args.debug:                        
        # If in debug mode show full stack trace
        import traceback
        traceback.print_exception(*sys.exc_info())
    log.error(str(e))
    h5file.close()
    sys.exit(1)
else:
    h5file.close()
