#!/usr/bin/env python

def imgify(filename, normalize, pix_size, image_size, zoom):
    import os
    import numpy as np
    from deepjets.preprocessing import preprocess, pixel_edges
    from deepjets.utils import jet_mass
    import h5py
    
    # read from the events file
    h5_input = h5py.File(filename, 'r')
    dset_jet = h5_input['jet']
    dset_trimmed_jet = h5_input['trimmed_jet']
    dset_subjets = h5_input['subjets']
    dset_trimmed_constit = h5_input['trimmed_constituents']
    dset_shrinkage = h5_input['shrinkage']
    dset_dr_subjets = h5_input['subjet_dr']
    dset_tau_1 = h5_input['tau_1']
    dset_tau_2 = h5_input['tau_2']
    dset_tau_3 = h5_input['tau_3']

    jet_size = h5_input['jet_size'][0]
    subjet_size_fraction = h5_input['subjet_size_fraction'][0]
    
    eta, phi = pix_size.split(',')
    eta_size = float(eta) 
    phi_size = float(phi)

    edges = pixel_edges(
        jet_size=jet_size,
        subjet_size_fraction=subjet_size_fraction,
        pix_size=(eta_size, phi_size))
    eta_edges, phi_edges = edges

    # create the output file
    output = os.path.splitext(filename)[0] + '_images.h5'
    h5_output = h5py.File(output, 'w')
    dset_images = h5_output.create_dataset(
        'images', (len(dset_subjets), image_size, image_size), dtype=np.double)
    
    auxvars = np.core.records.fromarrays(
        [dset_jet['pT'], dset_trimmed_jet['pT'],
         dset_jet['mass'], dset_trimmed_jet['mass'],
         dset_dr_subjets[:], dset_tau_1[:], dset_tau_2[:], dset_tau_3[:]],
        names='pt,pt_trimmed,mass,mass_trimmed,subjet_dr,tau_1,tau_2,tau_3')
    dset_auxvars = h5_output.create_dataset('auxvars', auxvars.shape, auxvars.dtype)
    dset_auxvars[:] = auxvars

    dset_eta_edges = h5_output.create_dataset(
        'eta_edges', (1, 2), dtype=np.double)
    dset_phi_edges = h5_output.create_dataset(
        'phi_edges', (1, 2), dtype=np.double)

    dset_eta_edges[0] = (eta_edges[0], eta_edges[-1])
    dset_phi_edges[0] = (phi_edges[0], phi_edges[-1])

    print("imgify({0}) -> {1} ...".format(filename, output))

    for event in xrange(len(dset_subjets)):
        subjets = dset_subjets[event]
        trimmed_constit = dset_trimmed_constit[event]
        image = preprocess(subjets, trimmed_constit, edges,
                           zoom=1. / dset_shrinkage[event] if zoom else False,
                           normalize=normalize,
                           out_width=image_size)
        # save the jet mass, pT and image
        dset_images[event] = image

    h5_output.close()


if __name__ == '__main__':
    from argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument('-n', type=int, default=-1)
    parser.add_argument('--normalize', default=False, action='store_true')
    parser.add_argument('--pix-size', default='0.1,0.1')
    parser.add_argument('--image-size', type=int, default=25)
    parser.add_argument('--no-zoom', default=False, action='store_true')
    parser.add_argument('files', nargs='+')
    args = parser.parse_args()
    
    from deepjets.parallel import map_pool, FuncWorker
    
    map_pool(
        FuncWorker,
        [(imgify, filename, args.normalize,
          args.pix_size, args.image_size, not args.no_zoom)
            for filename in args.files],
        n_jobs=args.n)
