#!/usr/bin/env python

import math

dphi = lambda phi1, phi2 : abs(math.fmod((math.fmod(phi1, 2*math.pi) - math.fmod(phi2, 2*math.pi)) + 3*math.pi, 2*math.pi) - math.pi)


def dR(jet1, jet2):
    return ((jet1['eta'] - jet2['eta'])**2 + dphi(jet1['phi'], jet2['phi'])**2)**0.5


def imgify(input, normalize, edges, image_size):
    import os
    import numpy as np
    from deepjets.preprocessing import preprocess
    from deepjets.utils import jet_mass
    import h5py
    
    eta_edges, phi_edges = edges

    # read from the events file
    h5_input = h5py.File(input, 'r')
    dset_jets = h5_input['jets']
    dset_trimmed_constit = h5_input['trimmed_constituents']
    dset_shrinkage = h5_input['shrinkage']

    # create the output file
    output = os.path.splitext(input)[0] + '_images.h5'
    h5_output = h5py.File(output, 'w')
    dt_images = np.dtype([
        ('pT', np.double),
        ('mass', np.double),
        ('dR_subjets', np.double),
        ('image', np.double, (image_size, image_size))])
    dset_images = h5_output.create_dataset('images', (len(dset_jets),), dtype=dt_images)
    
    print("imgify({0}) -> {1} ...".format(input, output))

    for event in xrange(len(dset_jets)):
        jets = dset_jets[event]
        dR_subjets = -1
        if len(jets) >= 3:
            dR_subjets = dR(jets[1], jets[2])
        trimmed_constit = dset_trimmed_constit[event]
        mass = jet_mass(trimmed_constit)
        image = preprocess(jets, trimmed_constit, edges,
                           zoom=1. / dset_shrinkage[event],
                           normalize=normalize)
        # save the jet mass, pT and image
        dset_images[event] = (jets['pT'][0], mass, dR_subjets, image)

    h5_output.close()


if __name__ == '__main__':
    from argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument('-n', type=int, default=-1)
    parser.add_argument('--normalize', default=False, action='store_true')
    parser.add_argument('--jet-size', type=float, default=1.2)
    parser.add_argument('--subjet-size-fraction', type=float, default=0.5)
    parser.add_argument('--pix-size', default='0.1,0.1')
    parser.add_argument('--image-size', type=int, default=25)
    parser.add_argument('files', nargs='+')
    args = parser.parse_args()
    
    from deepjets.parallel import map_pool, FuncWorker
    from deepjets.preprocessing import pixel_edges
    
    eta, phi = args.pix_size.split(',')
    eta_size = float(eta) 
    phi_size = float(phi)

    edges = pixel_edges(
        jet_size=args.jet_size,
        subjet_size_fraction=args.subjet_size_fraction,
        pix_size=(eta_size, phi_size))

    map_pool(
        FuncWorker,
        [(imgify, filename, args.normalize, edges, args.image_size)
            for filename in args.files],
        n_jobs=args.n)
