#!/usr/bin/env python
    
import os
import sys


def merge(args):

    import h5py as h5
    import numpy as np
    from numpy.lib.recfunctions import append_fields
    
    if args.pt_bins is not None:
        # format: "low:high:bins"
        args.pt_bins = map(int, args.pt_bins.split(':'))
        if len(args.pt_bins) != 3:
            raise ValueError("--pt-bins must have the format low:high:bins")
        if args.pt_bins[-1] != len(args.files):
            raise ValueError("--pt-bins number of bins must match the number of files")
        args.pt_bins[-1] += 1
        args.pt_bins = np.linspace(*args.pt_bins)

    if args.trimmed_mass_bounds is not None:
        args.trimmed_mass_bounds = map(float, args.trimmed_mass_bounds.split('-'))
        if len(args.trimmed_mass_bounds) != 2:
            raise ValueError("--trimmed-mass-bounds must have the format low-high")
    if args.trimmed_pt_bounds is not None:
        args.trimmed_pt_bounds = map(float, args.trimmed_pt_bounds.split('-'))
        if len(args.trimmed_pt_bounds) != 2:
            raise ValueError("--trimmed-pt-bounds must have the format low-high")

    from deepjets.samples import dataset_append, get_flat_weights

    print "will append tables in this order:"
    for filename in args.files:
        print filename
    print

    h5output = h5.File(args.output, 'w')

    for i, filename in enumerate(args.files):
        print "appending {0} ...".format(filename)
        h5input = h5.File(filename, 'r')
        images = h5input['images']
        auxvars = h5input['auxvars']

        selection = None
        if args.pt_bins is not None:
            low, high = args.pt_bins[i], args.pt_bins[i + 1]
            selection = (auxvars['pt_trimmed'] >= low) & (auxvars['pt_trimmed'] < high)
        if args.trimmed_mass_bounds is not None:
            low, high = args.trimmed_mass_bounds
            cut = (auxvars['mass_trimmed'] >= low) & (auxvars['mass_trimmed'] < high)
            if selection is not None:
                selection &= cut
            else:
                selection = cut
        if args.trimmed_pt_bounds is not None:
            low, high = args.trimmed_pt_bounds
            cut = (auxvars['pt_trimmed'] >= low) & (auxvars['pt_trimmed'] < high)
            if selection is not None:
                selection &= cut
            else:
                selection = cut
        
        if selection is not None:
            images = np.take(images.value, np.where(selection), axis=0)[0]
            auxvars = auxvars[selection]
        
        if 'weights' in auxvars.dtype.names:
            print "WARNING: existing weights in {0} will be overwritten".format(filename)
        else:
            auxvars = append_fields(auxvars, 'weights', data=np.ones(auxvars.shape[0], dtype=np.double))

        # append to output
        dataset_append(h5output, 'images', images)
        dataset_append(h5output, 'auxvars', auxvars)

    # finally create weights that flatten pT
    pt_bins = args.num_weight_bins
    if args.pt_bins is not None:
        pt_bins *= args.pt_bins.shape[0] - 1
        pt_min, pt_max = args.pt_bins[0], args.pt_bins[-1]
    else:
        if args.trimmed_pt_bounds is not None:
            pt_min, pt_max = args.trimmed_pt_bounds
        else:
            pt_min, pt_max = h5output['auxvars']['pt_trimmed'].min(), h5output['auxvars']['pt_trimmed'].max()

    weights = get_flat_weights(h5output['auxvars']['pt_trimmed'], pt_min, pt_max, pt_bins)
    h5output['auxvars']['weights'] = weights
    h5output.close()


def create(args):
    # loop over files
    # convert everything to float32
    # perform random shuffle
    # merge into one file
    import h5py as h5
    import numpy as np

    h5output = h5.File(args.output, 'w')

    for i, filename in enumerate(args.files):
        print "reading in {0} ...".format(filename)
        h5input = h5.File(filename, 'r')
        images = h5input['images'].value
        auxvars = h5input['auxvars'].value

        # convert to float32
        print "converting to float32 ..."
        images = images.astype(np.float32)
        dtype = np.dtype([(name, np.float32) for name in auxvars.dtype.names])
        auxvars = auxvars.astype(dtype)

        # shuffle
        print "performing random shuffle ..."
        permute_idx = np.random.permutation(len(images))
        images = images[permute_idx]
        auxvars = auxvars[permute_idx]

        # append to output
        print "appending to output ..."
        dataset_append(h5output, 'images', images)
        dataset_append(h5output, 'auxvars', auxvars)


if __name__ == '__main__':

    from argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument('--batch', default=None)
    parser.add_argument('--dry', action='store_true', default=False)

    subparsers = parser.add_subparsers(dest='subparser')

    merge_parser = subparsers.add_parser('merge')
    merge_parser.add_argument('--pt-bins', default=None)
    merge_parser.add_argument('--num-weight-bins', type=int, default=4)
    merge_parser.add_argument('--trimmed-mass-bounds', default=None)
    merge_parser.add_argument('--trimmed-pt-bounds', default=None)
    merge_parser.add_argument('--output', '-o')
    merge_parser.add_argument('files', nargs='+')

    create_parser = subparsers.add_parser('create')
    create_parser.add_argument('--output', '-o')
    create_parser.add_argument('files', nargs='+')

    args = parser.parse_args()
    
    if args.batch is not None:
        # call me again but in a batch job for each input file
        import subprocess
        from deepjets.path_utils import mkdir_p

        cmd = sys.argv[:]
        # remove batch option
        idx = cmd.index('--batch')
        cmd.pop(idx)
        cmd.pop(idx)
        cmd = ' '.join(cmd)
        output_dir = os.getcwd()
        setup_cmd = "source {0}/setup.sh; cd {1};".format(
            os.path.dirname(os.path.realpath(__file__)),
            output_dir)
        log_path = os.path.join(output_dir, 'log')
        if args.dry:
            print "mkdir -p {0}".format(log_path)
        else:
            mkdir_p(log_path)
        cmd_batch = (
            'echo "{setup} {cmd}" | '
            'qsub -e {output_dir}/log -o {output_dir}/log '
            '-N {name} -l nodes=1:ppn=1 -l mem=6GB -q {queue};').format(
                setup=setup_cmd,
                cmd=cmd,
                output_dir=output_dir,
                queue=args.batch,
                name=args.output)
        print cmd_batch
        if not args.dry:
            subprocess.call(cmd_batch, shell=True)
        sys.exit(0)
    
    # check if output already exists and is finished
    if os.path.exists(args.output):
        try:
            h5py.File(args.output, 'r')
        except:
            print "{0} exists but is not complete. Will overwrite it.".format(args.output)
            pass
        else:
            print "{0} exists and is complete. Nothing to do.".format(args.output)
            sys.exit(1)
    
    if args.subparser == 'merge':
        merge(args)
    else:
        create(args)
