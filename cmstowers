#!/usr/bin/env python
"""
Convert CMS public data into HDF5 tables of towers in the same format at Delphes output
"""

def convert_file(filename):
    from deepjets.samples import create_event_datasets
    from deepjets.generate import get_generator_input
    from deepjets.detector import reconstruct
    from fnmatch import fnmatch
    from progressbar import Bar, ETA, Percentage, ProgressBar
    from rootpy.io import root_open
    import numpy as np
    import root_numpy as rnp
    import h5py
    
    from rootpy import log
    import logging

    log = logging.getLogger(os.path.basename(__file__))
    log.setLevel(logging.INFO)

    class NoDictMessagesFilter(logging.Filter):                                 
        def filter(self, record):                                               
            return "no dictionary for class" not in record.msg                 

    log["/ROOT.TClass.TClass"].addFilter(NoDictMessagesFilter()) 

    
    outputname = os.path.splitext(os.path.basename(filename))[0] + '_towers.h5'
    if os.path.exists(outputname):
        return
    h5output = h5py.File(outputname, 'w')
    cmsroot = root_open(filename, 'r')
    events = cmsroot.Events

    num_events = len(events)

    widgets = [Percentage(), ' ', Bar('>'), ' ', ETA()]
    pbar = ProgressBar(widgets=widgets, max_value=num_events).start()

    create_event_datasets(h5output, num_events, delphes=True)
    dset_candidates = h5output['events']

    ievent = 0
    batchsize = 200
    while ievent < num_events:
        array = rnp.tree2array(
            events,
            branches=[
                'CaloTowersSorted_towerMaker__RECO.obj.pt_',
                'CaloTowersSorted_towerMaker__RECO.obj.eta_',
                'CaloTowersSorted_towerMaker__RECO.obj.phi_'],
            start=ievent, stop=ievent + batchsize)
        array.dtype.names = ('pt', 'eta', 'phi')
        for isub, subarray in enumerate(array): 
            event = np.empty(subarray['pt'].shape[0], dtype=[('E', np.double), ('px', np.double), ('py', np.double), ('pz', np.double)])
            event['E'] = subarray['pt'] * np.cosh(subarray['eta'])
            event['px'] = subarray['pt'] * np.cos(subarray['phi'])
            event['py'] = subarray['pt'] * np.sin(subarray['phi'])
            event['pz'] = subarray['pt'] * np.sinh(subarray['eta'])
            dset_candidates[ievent + isub] = event
        ievent += batchsize
        pbar.update(min(ievent, num_events - 1))
    pbar.finish()

    h5output.close()
    cmsroot.Close()


if __name__ == '__main__':
    from argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument('--batch', default=None)
    parser.add_argument('--dry', action='store_true', default=False)
    parser.add_argument('files', nargs='+', help="CMS ROOT file(s)")
    args = parser.parse_args()
    
    import os
    import sys

    if args.batch is not None:
        # call me again but in a batch job for each input file
        import subprocess
        from deepjets.path_utils import mkdir_p

        cmd = sys.argv[:]
        # remove batch option
        idx = cmd.index('--batch')
        cmd.pop(idx)
        cmd.pop(idx)
        # remove filenames
        for filename in args.files:
            cmd.remove(filename)
        output_dir = os.getcwd()
        setup_cmd = "source {0}/setup.sh; cd {1};".format(
            os.path.dirname(os.path.realpath(__file__)),
            output_dir)
        log_path = os.path.join(output_dir, 'log')
        if args.dry:
            print "mkdir -p {0}".format(log_path)
        else:
            mkdir_p(log_path)
        # call self in batch job once per file
        for filename in args.files:
            name = os.path.splitext(os.path.basename(filename))[0]
            if os.path.exists(name + '_towers.h5'):
                continue
            cmd_file = ' '.join(cmd + [filename])
            cmd_batch = (
                'echo "{setup} {cmd_file}" | '
                'qsub -e {output_dir}/log -o {output_dir}/log '
                '-N {name} -l nodes=1:ppn=1 -q {queue};').format(
                    setup=setup_cmd,
                    cmd_file=cmd_file,
                    output_dir=output_dir,
                    queue=args.batch,
                    name=name)
            print cmd_batch
            if not args.dry:
                subprocess.call(cmd_batch, shell=True)
        sys.exit(0)
   
    convert_file(args.files[0])
