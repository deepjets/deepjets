#!/usr/bin/env python


def plot_single(input):
    import os
    import numpy as np
    from deepjets import generate
    from deepjets.preprocessing import preprocess
    from matplotlib import pyplot as plt
    import h5py
    
    print("plotting {0} ...".format(input))

    h5file_events = h5py.File(input, 'r')
    dset_jet = h5file_events['jet']
    dset_trimmed_jet = h5file_events['trimmed_jet']

    output_prefix = os.path.splitext(input)[0]

    fig = plt.figure(figsize=(5, 5))
    ax  = fig.add_subplot(111)
    ax.hist(dset_jet['mass'], bins=np.linspace(0, 120, 20),
            histtype='stepfilled', facecolor='none', edgecolor='blue')
    fig.tight_layout()
    plt.savefig(output_prefix + '_jet_mass.png')
    
    fig = plt.figure(figsize=(5, 5))
    ax  = fig.add_subplot(111)
    ax.hist(dset_trimmed_jet['mass'], bins=np.linspace(0, 120, 20),
            histtype='stepfilled', facecolor='none', edgecolor='blue')
    fig.tight_layout()
    plt.savefig(output_prefix + '_jet_trimmed_mass.png')

    fig = plt.figure(figsize=(5, 5))
    ax  = fig.add_subplot(111)
    ax.hist(dset_jet['pT'], bins=np.linspace(0, 600, 100),
            histtype='stepfilled', facecolor='none', edgecolor='blue')
    fig.tight_layout()
    plt.savefig(output_prefix + '_jet_pt.png')
    
    fig = plt.figure(figsize=(5, 5))
    ax  = fig.add_subplot(111)
    ax.hist(dset_trimmed_jet['pT'], bins=np.linspace(0, 600, 100),
            histtype='stepfilled', facecolor='none', edgecolor='blue')
    fig.tight_layout()
    plt.savefig(output_prefix + '_jet_trimmed_pt.png')


def plot_multiple(filenames):
    import h5py
    import dask.array as da
    from dask.diagnostics import ProgressBar
    pbar = ProgressBar(minimum=0)
    pbar.register()

    dsets = [h5py.File(fn)['/jet'] for fn in filenames]
    arrays = [da.from_array(dset['mass'], chunks=1000) for dset in dsets]
    for a in arrays:
        print a.chunks
    array = da.stack(arrays, axis=0)
    hist_mass = da.histogram(array, bins=np.linspace(0, 120, 20))
    print(hist_mass)


if __name__ == '__main__':
    from argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument('-n', type=int, default=-1)
    parser.add_argument('--merge', default=False, action='store_true')
    parser.add_argument('files', nargs='+')
    args = parser.parse_args()
    

    if args.merge:
        plot_multiple(args.files) 
    else:
        from deepjets.parallel import map_pool, FuncWorker

        map_pool(
            FuncWorker, [(plot_single, filename) for filename in args.files],
            n_jobs=args.n)
